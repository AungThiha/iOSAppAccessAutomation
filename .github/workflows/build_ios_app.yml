name: build iOS app

on:
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # just to check what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      # - name: Install the Apple distribution certificate
      #   env:
      #     APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
      #     APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD_BASE64 }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     DISTRIBUTION_CERTIFICATE_PATH=distribution_certificate.p12
      #     KEYCHAIN_PATH=app-signing.keychain-db

      #     # import certificate from secrets
      #     echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DISTRIBUTION_CERTIFICATE_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security default-keychain -d user -s $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $DISTRIBUTION_CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T "/usr/bin/codesign"

      #     # make keychain open for codesigning
      #     security set-key-partition-list -S apple-tool:,apple:,codesign:,java: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH
      #     security find-identity -v -p codesigning

      - name: checkout repository
        uses: actions/checkout@v3

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.9'

      # - name: Install Python dependencies
      #   run: |
      #     pip install pyjwt cryptography requests
      
      # - name: Create provisioning profile
      #   id: create_provisioning_profile
      #   env:
      #     APPLE_CONNECT_API_KEY_BASE64: ${{ secrets.APPLE_CONNECT_API_KEY_BASE64 }}
      #     APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64 }}
      #     APPLE_CONNECT_PRIVATE_KEY_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_BASE64 }}
      #     APPLE_DISTRIBUTION_CERTIFICATE_ID_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_ID_BASE64 }}
      #     PHOTO_ALBUM_IOS_APP_BUNDLE_ID_BASE64: ${{ secrets.PHOTO_ALBUM_IOS_APP_BUNDLE_ID_BASE64 }}
      #   run: |
      #     NEWLY_CREATED_PROFILE_ID=$(python3 .github/apple/create_provisioning_profile.py)
      #     echo "NEWLY_CREATED_PROFILE_ID=$NEWLY_CREATED_PROFILE_ID" >> $GITHUB_OUTPUT
      #     ls provisioning_profile.mobileprovision

      #     # apply provisioning profile
      #     mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
      #     cp ./provisioning_profile.mobileprovision ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

      #     # cp provisioning profile into another place to make sure it works
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp ./provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

      #     PROFILE_NAME=$(security cms -D -i ./provisioning_profile.mobileprovision | plutil -extract Name raw -o - -)
      #     echo "Profile Name: $PROFILE_NAME"
      #     echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_OUTPUT

      - name: Checkout PhotoAlbumKMP repo to a directory
        uses: actions/checkout@v3
        with:
          repository: AungThiha/PhotoAlbumKMP
          path: ./PhotoAlbumKMP  # This will clone it into the "PhotoAlbumKMP" directory

      # - name: Setup Java
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: 'temurin' # See 'Supported distributions' for available options
      #     java-version: '21'

      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@v3

      - name: Retrive previous iOS build number from cach and bump it
        id: ios_build_number
        uses: ./.github/actions/bump-build-number
        with:
          cache-key: "ios-build-number-cache"

      - name: Set new iOS build number in Info.plist
        env:
          NEW_IOS_BUILD_NUMBER: ${{ steps.ios_build_number.outputs.NEW_BUILD_NUMBER }}
        run: |
          cd ./PhotoAlbumKMP/iosApp/iosApp
          echo $NEW_IOS_BUILD_NUMBER
          
          /usr/libexec/PlistBuddy \
          -c "Set :CFBundleVersion" \
          $NEW_IOS_BUILD_NUMBER \
          Info.plist
          cat Info.plist

      # - name: Build archive
      #   env:
      #     OVERRIDE_KOTLIN_BUILD_IDE_SUPPORTED: 'NO'
      #     PROFILE_NAME: ${{ steps.create_provisioning_profile.outputs.PROFILE_NAME }}
      #   run: |
      #     cd ./PhotoAlbumKMP/iosApp

      #     xcodebuild -project ./iosApp.xcodeproj \
      #     -scheme iosApp -configuration "Release" \
      #     -allowProvisioningUpdates \
      #     -destination generic/platform=iOS \
      #     -archivePath ./build/iosApp.xcarchive \
      #     archive \
      #     PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME"

      # - name: Export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST_TEMPLATE_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_TEMPLATE_BASE64 }}
      #     PROFILE_NAME: ${{ steps.create_provisioning_profile.outputs.PROFILE_NAME }}
      #   run: |

      #     cd ./PhotoAlbumKMP/iosApp

      #     EXPORT_OPTS_PATH=ExportOptions.plist

      #     # Decode the base64-encoded string into a variable
      #     EXPORT_OPTIONS_PLIST_TEMPLATE=$(echo -n "$EXPORT_OPTIONS_PLIST_TEMPLATE_BASE64" | base64 --decode)

      #     # Replace the placeholder PROFILE_NAME with the actual value
      #     EXPORT_OPTIONS_PLIST_CONTENT=$(echo "$EXPORT_OPTIONS_PLIST_TEMPLATE" | sed "s/PROFILE_NAME/$PROFILE_NAME/")

      #     # Write export option list to disk
      #     echo "$EXPORT_OPTIONS_PLIST_CONTENT" > $EXPORT_OPTS_PATH

      #     xcodebuild -exportArchive \
      #     -archivePath ./build/iosApp.xcarchive \
      #     -exportPath ./build/ipa \
      #     -exportOptionsPlist $EXPORT_OPTS_PATH

      # - name: Download email list
      #   id: download_email_list
      #   env:
      #     IOS_GITHUB_WORKFLOW_PRIVATE_KEY_ID_BASE64: ${{ secrets.IOS_GITHUB_WORKFLOW_PRIVATE_KEY_ID_BASE64 }}
      #     IOS_GITHUB_WORKFLOW_PRIVATE_KEY_ISSUER_ID_BASE64: ${{ secrets.IOS_GITHUB_WORKFLOW_PRIVATE_KEY_ISSUER_ID_BASE64 }}
      #     IOS_GITHUB_WORKFLOW_PRIVATE_KEY_BASE64: ${{ secrets.IOS_GITHUB_WORKFLOW_PRIVATE_KEY_BASE64 }}
      #   run: |
      #     python3 .github/iOSAppAccessAutomation/download_emails.py

      # - name: Install Firebase CLI
      #   run: |
      #     curl -sL https://firebase.tools | upgrade=true bash

      # - name: Write Google service account credential to disk
      #   env:
      #     GOOGLE_SERVICE_ACCOUNT_BASE64: ${{ secrets.PHOTO_ALBUM_FIREBASE_PROJECT_SERVICE_ACCOUNT_GITHUB_WORKFLOW_BASE64 }}
      #   run: |
      #     echo "$GOOGLE_SERVICE_ACCOUNT_BASE64" | base64 --decode > google_service_account.json

      # - name: Distribute the build
      #   env:
      #     IOS_FIREBASE_PROJECT_ID_BASE64: ${{ secrets.PHOTO_ALBUM_FIREBASE_PROJECT_IOS_APP_ID_BASE64 }}
      #   run: |

      #     # set absolute file path of google_service_account as env variable
      #     export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/google_service_account.json
      #     echo $GOOGLE_APPLICATION_CREDENTIALS

      #     IOS_FIREBASE_PROJECT_ID=$(echo -n "$IOS_FIREBASE_PROJECT_ID_BASE64" | base64 --decode)
          
      #     # https://firebase.google.com/docs/app-distribution/ios/distribute-cli
      #     firebase appdistribution:distribute ./PhotoAlbumKMP/iosApp/build/ipa/PhotoAlbum.ipa \
      #     --app $IOS_FIREBASE_PROJECT_ID \
      #     --testers-file testers.txt \
      #     --release-notes "Firebase does not send emails to the testers if the build number is not increased. The change in this version only involves building with a new provisioning profile to allow new devices to access the app and increasing the build version. Nothing else is changed."

      # - name: Delete all old provisioning profiles
      #   env:
      #     APPLE_CONNECT_API_KEY_BASE64: ${{ secrets.APPLE_CONNECT_API_KEY_BASE64 }}
      #     APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64 }}
      #     APPLE_CONNECT_PRIVATE_KEY_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_BASE64 }}
      #     NEWLY_CREATED_PROFILE_ID: ${{ steps.create_provisioning_profile.outputs.NEWLY_CREATED_PROFILE_ID }}
      #   run: |
      #     python3 .github/apple/delete_provisioning_profiles.py $NEWLY_CREATED_PROFILE_ID
