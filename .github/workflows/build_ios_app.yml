name: build iOS app

on:
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install the Apple distribution certificate
        env:
          APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DISTRIBUTION_CERTIFICATE_PATH=distribution_certificate.cer
          KEYCHAIN_PATH=app-signing.keychain-db

          # import certificate from secrets
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DISTRIBUTION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import "$DISTRIBUTION_CERTIFICATE_PATH" -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install pyjwt cryptography requests
      
      - name: Run Python script
        env:
          APPLE_CONNECT_API_KEY_BASE64: ${{ secrets.APPLE_CONNECT_API_KEY_BASE64 }}
          APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64 }}
          APPLE_CONNECT_PRIVATE_KEY_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_BASE64 }}
          PROVISIONING_PROFILE_ID_BASE64: ${{ secrets.PROVISIONING_PROFILE_ID_BASE64 }}
        run: |
          python3 download_provisioning_profile.py
          ls provisioning_profile.mobileprovision

      #     # apply provisioning profile
      #     mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles          

      # - name: build archive
      #   run: |
      #     xcodebuild -scheme "I am Groot" \
      #     -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
      #     -sdk iphoneos \
      #     -configuration Debug \
      #     -destination generic/platform=iOS \
      #     clean archive          

      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
      #     echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      # - name: Upload application
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app
      #     path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
      #     # you can also archive the entire directory 
      #     # path: ${{ runner.temp }}/build
      #     retention-days: 3