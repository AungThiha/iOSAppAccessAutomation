name: build iOS app with existing provisioning profile

on:
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install the Apple distribution certificate
        env:
          APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
          APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          DISTRIBUTION_CERTIFICATE_PATH=distribution_certificate.p12
          KEYCHAIN_PATH=app-signing.keychain-db

          # import certificate from secrets
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DISTRIBUTION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -d user -s $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DISTRIBUTION_CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T "/usr/bin/codesign"
          security set-key-partition-list -S apple-tool:,apple:,codesign:,java: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security find-identity -v -p codesigning

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install pyjwt cryptography requests
      
      - name: Download provisioning profile
        env:
          APPLE_CONNECT_API_KEY_BASE64: ${{ secrets.APPLE_CONNECT_API_KEY_BASE64 }}
          APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_ISSUER_ID_BASE64 }}
          APPLE_CONNECT_PRIVATE_KEY_BASE64: ${{ secrets.APPLE_CONNECT_PRIVATE_KEY_BASE64 }}
          PROVISIONING_PROFILE_ID_BASE64: ${{ secrets.PROVISIONING_PROFILE_ID_BASE64 }}
        run: |
          python3 download_provisioning_profile.py
          ls provisioning_profile.mobileprovision

          # apply provisioning profile
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
          cp ./provisioning_profile.mobileprovision ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

          # cp provisioning profile into two places to make sure it works
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ./provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Checkout PhotoAlbumKMP repo to a directory
        uses: actions/checkout@v2
        with:
          repository: AungThiha/PhotoAlbumKMP
          path: ./PhotoAlbumKMP  # This will clone it into the "PhotoAlbumKMP" directory

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build archive
        env:
          OVERRIDE_KOTLIN_BUILD_IDE_SUPPORTED: 'NO'
        run: |
          cd ./PhotoAlbumKMP/iosApp

          PROFILE_NAME=$(security cms -D -i provisioning_profile.mobileprovision | plutil -extract Name raw -o - -)
          echo "Name: $PROFILE_NAME"

          xcodebuild -project ./iosApp.xcodeproj \
          -scheme iosApp -configuration "Release" \
          -allowProvisioningUpdates \
          -destination generic/platform=iOS \
          -archivePath ./build/iosApp.xcarchive \
          archive \
          PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME"

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |

          cd ./PhotoAlbumKMP/iosApp

          EXPORT_OPTS_PATH=ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode -o $EXPORT_OPTS_PATH

          xcodebuild -exportArchive \
          -archivePath ./build/iosApp.xcarchive \
          -exportPath ./build/ipa \
          -exportOptionsPlist $EXPORT_OPTS_PATH

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./PhotoAlbumKMP/iosApp/build/ipa/PhotoAlbum.ipa
          retention-days: 3